@page "/"
@page "/{Code}"
@inject HttpClient Http
@inject NavigationManager navigationManager

<div class="container">
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info" role="alert">
            @message
        </div>
    }

    @if (string.IsNullOrEmpty(Code))
    {
        <div class="row">
            <div class="col-sm-12">
                <img class="d-block mx-auto" src="/img/myacv-banner.svg" alt="" width="100%" height="100%">
            </div>
        </div>
        <!-- VideoRow End -->
        <div class="between-video"></div>
        <!-- VideoRow Start -->
        <div class="row">
            <div class="col-sm-12">
                <EditForm Model=@searchModel OnValidSubmit=@OnSubmit>
                    <p id="Form_ImageSearchForm_error" class="message " style="display: none"></p>
                    <fieldset>
                        <div id="Photo" class="field text nolabel">
                            <div class="middleColumn">
                                <InputText class="text nolabel" Placeholder="Enter wristband ID" id="SearchValue" @bind-Value="searchModel.SearchValue"></InputText>
                            </div>
                        </div>
                        <div class="clear"><!-- --></div>
                    </fieldset>
                    <div class="Actions">
                        <input type="submit" name="action_GetImageForm" value="Search" class="action" id="Form_ImageSearchForm_action_GetImageForm" />
                    </div>
                </EditForm>
            </div>
        </div>
        <!-- VideoRow End -->
    }
    else if (codeIndexes != null)
    {
        <!-- video -->
        foreach (var codeIndex in codeIndexes)
        {
            string src = $"{navigationManager.BaseUri}api/GetMediaFile?name={codeIndex.Filename}";
            if (navigationManager.BaseUri.Contains("localhost"))
            {
                src = $"http://localhost:7071/api/GetMediaFile?name={codeIndex.Filename}";
            }
            <div class="row">
                <div class="offset-lg-3 col-lg-6 offset-md-3 col-md-6 col-sm-12 col-xs-12">
                    @if (MimeTypes.MimeTypeMap.GetMimeType(System.IO.Path.GetExtension(codeIndex.Filename)).StartsWith("video"))
                    {
                        <BlazoredVideo Play="(state) => OnPlay(state, codeIndex)" class="w-100" controls="controls" preload="" loop="" controlslist="" muted="" playsinline="" style="visibility: visible;">
                            <source src="@src" type="video/mp4" />
                        </BlazoredVideo>
                    }
                    else if (MimeTypes.MimeTypeMap.GetMimeType(System.IO.Path.GetExtension(codeIndex.Filename)).StartsWith("image"))
                    {
                        <img src="@src" style="width:450px" class="mb-2" />
                    }
                    <a href="@src" data-title="@codeIndex.Filename" download="@codeIndex.Filename" target="_top" type="button" class="btn btn-block btn-lg btn-outline-primary" @onclick="() => OnDownload(codeIndex)">
                        Download to Share <svg width="1em" height="1em" viewBox="0 0 17 17" class="bi bi-arrow-down-circle" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path>
                            <path fill-rule="evenodd" d="M4.646 7.646a.5.5 0 0 1 .708 0L8 10.293l2.646-2.647a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 0-.708z"></path>
                            <path fill-rule="evenodd" d="M8 4.5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5z"></path>
                        </svg>
                    </a>
                    <h6 class="text-center ios-instructions">iOS Click and hold button to show download options</h6>
                </div>
            </div>
            <div class="between-video"></div>
        }
        <div class="py-3 text-center">
            <div class="alert alert-warning lead" role="alert">
                Remember to download your video within 7 days of your visit.
            </div>
        </div>
    }
    else
    {
        <div class="py-3 text-center">
            <p class="lead">Loading...</p>
        </div>
    }
</div>

@code {

    [Parameter]
    public string Code { get; set; }

    SearchModel searchModel = new SearchModel();
    string message = "";
    IEnumerable<CodeIndex> codeIndexes;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Code))
        {
            var result = await Http.GetAsync($"/api/GetMediaByCode?code={Code}");
            if (result.IsSuccessStatusCode)
            {
                codeIndexes = await result.Content.ReadFromJsonAsync<IEnumerable<CodeIndex>>();
            }
            else
            {
                message = $"[{result.StatusCode}] {result.ReasonPhrase}";
            }
            StateHasChanged();
        }
    }

    private void OnSubmit()
    {
        navigationManager.NavigateTo("/" + searchModel.SearchValue);
    }

    async void OnPlay(VideoState state, CodeIndex codeIndex)
    {
        codeIndex.PlaybackCount++;
        var result = await Http.PostAsJsonAsync<CodeIndex>($"/api/UpdatePlaybackAndDownloadCounts?code={Code}&action={UserActionType.Play}", codeIndex);
        if (!result.IsSuccessStatusCode)
        {
            message = $"[{result.StatusCode}] {result.ReasonPhrase}";
        }
    }

    async void OnDownload(CodeIndex codeIndex)
    {
        codeIndex.DownloadCount++;
        var result = await Http.PostAsJsonAsync<CodeIndex>($"/api/UpdatePlaybackAndDownloadCounts?code={Code}&action={UserActionType.Download}", codeIndex);
        if (!result.IsSuccessStatusCode)
        {
            message = $"[{result.StatusCode}] {result.ReasonPhrase}";
        }
    }

    public class SearchModel
    {
        public string SearchValue { get; set; }
    }
}
